const { ethers } = require("ethers");
const { MerkleTree } = require("merkletreejs");
const keccak256 = require("keccak256");
const { generateList } = require('./test/functions/index');
const fs = require('fs')

const accounts = [
    "0x26bd528467AFB94653cBC7c182EB2520bf75D921",
    "0x6726b860FA635d16e65513bD68a49221a25b7590",
    "0x1Fd59E39b5318B1fa625efCfeCf3FeBfAEb388a1",
    "0xD961ea8778Ad218564e412700fc61d768C9D9a64",
    "0xa248BffadEd33a0c3860e3dEACe0D0C68E3a7a0E",
    "0xf17Fc0aa8DAE14a3f1CeC2088cc6b26aeE99CacB",
    "0xA8470f9744fF2a7935AAa3A704f97A1A69f65ED2",
    "0x0579412B462f539e2718045F6C77E8913F17e91A",
    "0xe3cD1116280265F6b6a81a3975d4568e1F77ceBa",
];

const abi = ethers.utils.defaultAbiCoder;

const generateTestList = (accounts) => {
    accounts.pop(0);
    const list = [];
    accounts.forEach((account) => {
        list.push({
            account: account,
            startAmount: ethers.utils.parseUnits("100", "18").toString(),
        });
    });

    return list;
};

const getMerkleTree = (testList) => {};

const getMerkleData = (account, testList) => {
    try {
        const accountData = testList.find((o) => o.account == account);
        const leafNodes = testList.map((item) => abi.encode(["address", "uint256"], [item.account, item.startAmount]));
        const merkleTree = new MerkleTree(leafNodes, keccak256, { hashLeaves: true, sortPairs: true });
        const root = merkleTree.getHexRoot();
        const leaf = keccak256(abi.encode(["address", "uint256"], [accountData.account, accountData.startAmount]));
        const proof = merkleTree.getHexProof(leaf);

        console.log(merkleTree.verify(proof, leaf, root));
        return {
            root,
            leaf,
            proof,
        };
    } catch (error) {
        console.log("Account is not in the list");
    }
};



/// Change to account list for vesting contract
const _accounts = [
    "0x910F225dF141bF0d297e17420Ebed2ecffBaC724",
    "0xD9B14Ae501F6Ec30409C0687e022E5841560a0c0",
    "0x3632518D2A22C3a9155632C72f601330a98A5269",
    "0x521E5aA9Bf9badDC6Aec05eA2301274022Eb7A14",
    "0x26B1C57Ea03A57C0BA2E9d5b97a6e8f1F5272f15",
    "0x2200d708456F7f390e2bA602d50Da9B2E9111A02",
    "0x7FbDF7B078C335B1ffb97D4a3396f6CbbCDe8f13",
    "0xFdBd69aeaD85F7aBA263D9b9cc3E3835BFf2D8b6",
    "0xb71B13b85D2c094B0FDeC64ab891b5BF5f110a8e",
    "0xE916507dEAA79748cd7041DC49496036d9bD131b",
    "0xDb84D8840E3DF6D61ae9239639277F7050D79435",
    "0xBd23535ae8E31d434Efb6aA28025101B39f642D7",
    "0x6a4581f52138d9361f2cC6Bf15F35226eCac6f69",
    "0xf73d574aD854F52a95381bF91e1855b0e69E59B5",
    "0x5d7A6fB0AAA4B79c93DCD7A43039c49AB83BC995",
    "0x9882dFf01aC22e5AAbF6A3b57ff9AA66c5aF82AB",
    "0x9C762Ae4A45E0c88287775493a489D5d2c3D2D00",
    "0x89182989Db86a537C9be4AAfDfAb60741A87f5df",
    "0x7512AF3191B27D4068A5D15B433d08757aCc5b1a",
    "0xb87BfBD6D84dC7615ccA69A7474a0dd89B10a015",
    "0x12543fD021F9cF7f70F60a453da07781F1e489E8",
    "0x635c9093c5D902Da9b78a505b04b5be276B7b9D2",
    "0xAeCe371b7c23439A2c9BC96070a2ea3df7fbfd26",
    "0x81aDFA0309A1629f68dB6A6cfF37a1fE68FFdd2a",
    "0xFF189410B8dD376B4DeD5111209d31811BCC80f8",
    "0x9A0a747610dC076b86A1C71dD1432E5a6FD560B4",
    "0xB557747Fb883C39adc7Fa3d16b96642C2D5c2A63",
    "0xedA1A6F1f0288012ad9d0Ab3BE1EC97065f0a133",
    "0x91e1a53a1C4c05328abc9bC47A2D3C41d71Db1A0",
    "0x1de938f401750F60954B1C980456aD1cDd9E7eeC",
    "0xFAdec222fce925654B99B26e0C2C1A34FA0D9F58",
    "0xA079bf10f0D1716AFbeE6534b7b0b2f688Ad417a",
    "0x7D4d9Bd3349b4A5fC1df8c491A3C54e8a5183427",
    "0xb2644e9FBda5f26AA8f9C506f56EAD5F04A35b98",
    "0xcc85D3B7fb301d347Ff4b6139e47f5a65A09b709",
    "0x60B75c46D8aF79492015824F4a665e0F4fE3cB67",
    "0x62eeab28E3910086Fc148687838C02a060FCA82d",
    "0x960E241d2339E0A2768D59CB01Ee1F2ddb51Fe12",
    "0x1491cc5Fccd965B30E44fA4A09fcD22b58787A99",
    "0x1Ae03ab8615317818C2557127EDF58F9Dda5225e",
    "0x95986831e38214750FBacb1EFEf6FA2f27e7285d",
    "0xfF139C0e20CA2c0E7209eeE5b421C5E0E85b4469",
    "0x700bc569F31885cCe777990C2f6322F98932f70d",
    "0xc67c53519507De3B02Af47eA7A554eeD7328BEbB",
    "0x9F3217aCaE811976B6d863d469823544eED11d72",
    "0xa2fFcaFB5ADF43f05f45cB6B6E3f84148D6209f5",
    "0xEf3A684De35a247e76f56bEB6a79a31DF7872585",
    "0x796c1eAB5096e400317De1Bf2Bf250fBF665e9d2",
    "0x9eb4215a810B4356C78c1E2456bEa1F88c24c83F",
    "0x9d9f64A0E1DE8c85ddd03Fe6f135C1E28Cea007A",
    "0x23711a5c8dbd3fc04792D42A54C00A8a70407cF8",
];


/// Change to corresponding amounts for vesting contract
const amounts = [
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
    "500000000000000000000000",
];



const list = generateList(_accounts, amounts);

const parsed = JSON.stringify(list);
fs.writeFileSync("data.json", parsed);